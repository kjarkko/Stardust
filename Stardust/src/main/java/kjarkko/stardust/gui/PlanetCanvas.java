/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kjarkko.stardust.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import kjarkko.stardust.logic.Planet;
import kjarkko.stardust.logic.Planets;
import kjarkko.stardust.logic.Settings;
import kjarkko.stardust.util.Coordinate;

/**
 * Window used for drawing planets.
 *
 * @author jarkko
 */
public class PlanetCanvas extends javax.swing.JPanel {

    private final Timer TIMER;

    /**
     * Creates new form PlanetCanvas
     */
    public PlanetCanvas() {
        super(true);
        super.setBackground(Color.BLACK);
        initComponents();
        PlanetCanvas c = this;

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame jf = new JFrame();
                jf.setSize(700, 700);
                jf.add(c);
                jf.setVisible(true);
            }
        });

        TIMER = new Timer();
        refresh();
    }

    /**
     * Repaints the window.
     */
    public void refresh() {
        TIMER.schedule(new TimerTask() {
            @Override
            public void run() {
                refresh();
            }
        }, Settings.getScreenRefreshRateMS());
        repaint();
    }

    private void drawPlanet(Planet p, Graphics g) {
        g.setColor(p.getColor());
        int radius = p.radius;
        Coordinate loc = p.getLocation();
        int x = 350 - (radius >> 1) + (int) (loc.getX() / Settings.getDistancePerPixel());
        int y = 350 - (radius >> 1) + (int) (loc.getY() / Settings.getDistancePerPixel());

        g.fillOval(x, y, radius, radius);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Planets.get()
                .getPlanetIterator()
                .forEachRemaining(
                        p -> drawPlanet(p, g));
    }

    /**
     * Starts the window.
     */
    public static void start() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PlanetCanvas().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(700, 700));
        setMinimumSize(new java.awt.Dimension(700, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
